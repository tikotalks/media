name: Publish Package

on:
  workflow_dispatch:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Set up Google Service Environment Variables
        run: |
          echo "GOOGLE_SERVICE_TYPE=service_account" >> $GITHUB_ENV
          echo "GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_PRIVATE_KEY_ID=${{ secrets.GOOGLE_PRIVATE_KEY_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_PRIVATE_KEY=${{ secrets.GOOGLE_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_EMAIL=${{ secrets.GOOGLE_CLIENT_EMAIL }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_AUTH_URI=https://accounts.google.com/o/oauth2/auth" >> $GITHUB_ENV
          echo "GOOGLE_TOKEN_URI=https://oauth2.googleapis.com/token" >> $GITHUB_ENV
          echo "GOOGLE_AUTH_PROVIDER_CERT_URL=https://www.googleapis.com/oauth2/v1/certs" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_CERT_URL=${{ secrets.GOOGLE_CLIENT_CERT_URL }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous version's images data
          git checkout HEAD~1 || true
          cat src/data/images.ts > old_images.ts 2>/dev/null || echo '{}' > old_images.ts
          git checkout -

          # Create a Node.js script to compare images and generate release notes
          cat > compare-images.js << 'EOF'
          import { readFileSync } from 'fs';

          function extractImages(filePath) {
            try {
              const data = readFileSync(filePath, 'utf8');
              const match = data.match(/export const images:ImageData\[] = (\[.*\])/s);
              return match ? JSON.parse(match[1]) : [];
            } catch (e) {
              return [];
            }
          }

          const oldImages = extractImages('old_images.ts');
          const newImages = extractImages('src/data/images.ts');

          const oldImageNames = new Set(oldImages.map(img => img.name));
          const newImageNames = new Set(newImages.map(img => img.name));

          const addedImages = newImages.filter(img => !oldImageNames.has(img.name));

          let notes = '## ðŸ–¼ Image Updates\n\n';

          if (addedImages.length > 0) {
            notes += '### ðŸ†• New Images\n\n';
            addedImages.forEach(img => {
              notes += `- ${img.name}${img.category ? ` (Categories: ${img.category.join(', ')})` : ''}`;
              notes += img.tags && img.tags.length ? ` [Tags: ${img.tags.join(', ')}]` : '';
              notes += '\n';
            });
          } else {
            notes += '_No new images added in this release._\n';
          }

          console.log(notes);
          EOF

          # Generate release notes
          NOTES=$(node compare-images.js)
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Clean up temporary file
          rm old_images.ts

      - name: Bump version and Create Release
        run: |
          VERSION=$(npm version patch -m "Release %s")
          git push --follow-tags
          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes "${{ env.release_notes }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: npm run build

      - name: Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
